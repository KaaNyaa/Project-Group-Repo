@model SSD_Lab1.Models.Order

@{
    ViewData["Title"] = "Create Order";
}

<h1>Create Order</h1>

<form asp-action="Create" method="post" id="orderForm">
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="FirstName" class="form-label"></label>
                <input asp-for="FirstName" class="form-control" required />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>

            <div class="form-group mt-2">
                <label asp-for="LastName" class="form-label"></label>
                <input asp-for="LastName" class="form-control" required />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>

            <div class="form-group mt-2">
                <label asp-for="Email" class="form-label"></label>
                <input asp-for="Email" class="form-control" type="email" required />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>

            <div class="form-group mt-2">
                <label asp-for="PhoneNumber" class="form-label"></label>
                <input asp-for="PhoneNumber" class="form-control" required />
                <span asp-validation-for="PhoneNumber" class="text-danger"></span>
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="Province" class="form-label"></label>
                <input asp-for="Province" class="form-control" required />
                <span asp-validation-for="Province" class="text-danger"></span>
            </div>

            <div class="form-group mt-2">
                <label asp-for="City" class="form-label"></label>
                <input asp-for="City" class="form-control" required />
                <span asp-validation-for="City" class="text-danger"></span>
            </div>

            <div class="form-group mt-2">
                <label asp-for="Street" class="form-label"></label>
                <input asp-for="Street" class="form-control" required />
                <span asp-validation-for="Street" class="text-danger"></span>
            </div>
        </div>
    </div>

    <h4 class="mt-4">Select Products</h4>
    <hr />

    @if (ViewBag.Products != null && ((List<SSD_Lab1.Models.Product>)ViewBag.Products).Count > 0)
    {
        <div class="row">
            @foreach (var product in ViewBag.Products as List<SSD_Lab1.Models.Product>)
            {
                <div class="col-md-6 mb-3">
                    <div class="card product-card">
                        <div class="card-body">
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input product-checkbox"
                                       name="productIds" value="@product.Id" id="p_@product.Id" />
                                <label class="form-check-label" for="p_@product.Id">
                                    <strong>@product.Name</strong><br />
                                    <small class="text-muted">
                                        Price: @product.Price.ToString("C")<br />
                                        Company: @product.Company?.Name<br />
                                        In Stock: <span class="stock-count">@product.StockQuantity</span>
                                    </small>
                                </label>
                            </div>
                            <div class="mt-2">
                                <label>Quantity:</label>
                                <input type="number" class="form-control quantity-input"
                                       name="quantities" value="1" min="1"
                                       max="@product.StockQuantity" disabled
                                       data-product-id="@product.Id" />
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            No products available. Please <a asp-controller="Products" asp-action="Create">create products</a> first.
        </div>
    }

    <div class="mt-4">
        <button type="submit" class="btn btn-primary btn-lg">Place Order</button>
        <a asp-action="Index" class="btn btn-secondary ms-2">Back to List</a>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const checkboxes = document.querySelectorAll('.product-checkbox');
            const form = document.getElementById('orderForm');

            // Enable/disable quantity inputs based on checkbox state
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const quantityInput = this.closest('.card-body').querySelector('.quantity-input');
                    quantityInput.disabled = !this.checked;

                    if (!this.checked) {
                        quantityInput.value = '1';
                    }
                });
            });

            // Form validation
            form.addEventListener('submit', function(e) {
                const selectedProducts = document.querySelectorAll('.product-checkbox:checked');
                if (selectedProducts.length === 0) {
                    e.preventDefault();
                    alert('Please select at least one product.');
                    return false;
                }

                // Validate quantities
                let hasInvalidQuantity = false;
                selectedProducts.forEach(checkbox => {
                    const quantityInput = checkbox.closest('.card-body').querySelector('.quantity-input');
                    const maxStock = parseInt(quantityInput.max);
                    const quantity = parseInt(quantityInput.value);

                    if (quantity > maxStock) {
                        hasInvalidQuantity = true;
                        alert(`Quantity for ${checkbox.closest('.card-body').querySelector('strong').textContent} cannot exceed available stock (${maxStock}).`);
                    }
                });

                if (hasInvalidQuantity) {
                    e.preventDefault();
                    return false;
                }

                console.log('Form submitted with products:', selectedProducts.length);
            });
        });
    </script>
}